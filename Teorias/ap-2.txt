Sintaxis 
Conjunto de reglas de los lenguajes
BNF 
N={<exp>, }
T={0,1,2,3,4,5,6,7,8,9,a,b,c,‚Ä¶‚Ä¶ }
S={<exp>}
P={<exp>::=
}
<term>|<term> + <exp>|<term> - <exp>
<term>::=<elem>|<elem> *<term>|<elem>/ <term>
<elem>::=<iden>|<n√∫m>
<iden>::=<letra>|<letra><sec>
<sec>::=<letra>|<digito>|<digito><sec>|<letra><sec>
<letra>::= a|b|c|‚Ä¶..
<digito>::= 0|1|2|‚Ä¶..

EBNF
<n√∫m>::= <digito>|<digito><n√∫m>
<term>,<elem>,<iden>,<letra>‚Ä¶.
<term>{(+|-)<term>}*
<term>::=<elem>{(*|/)<elem>}*
<n√∫m>::=<digito>{<d√≠gito>}*
<iden>::=<letra>{(<letra>|<digito>)}*
<elem>::=(<iden>|<n√∫m>)
<letra>::=(a|b|c..)
<d√≠gito>::=(0|1|2..)

Sem√°ntica 
Decribe el significado de los simbolos, palabras y frases de un lenguaje

Hay 2 tipos:
Est√°tica: 
-No esta relacionado con el significado del programa, est√° relacionado con las formas validas(sintaxis).
-se llaman asi porque el an√°lisis para el chequeo puede hacerse en compilaci√≥n.
-se describen usando las denominadas "gram√°ticas de atributos", inventadas por Knuth.
-Generalmente las gram√°ticas sensibles al contexto resuelven los aspectos de la sem√°ntica est√°tica.
gramatica de atributos
-A las construcciones del lenguaje se les asocia informaci√≥n a trav√©s de los llamados ‚Äúatributos‚Äù asociados a los s√≠mbolos de la gram√°tica correspondiente.
-Los valores de los atributos se calculan mediante las llamadas ‚Äúecuaciones o reglas sem√°nticas‚Äù
-La evaluaci√≥n de las reglas sem√°nticas puede: 
üëç Generar C√≥digo. 
üëç Insertar informaci√≥n en la Tabla de S√≠mbolos. 
üëç Realizar el Chequeo Sem√°ntico. 
üëç Dar mensajes de error, etc. 

-Los atributos estan directamente relacionados con los simbolos gramaticales (terminales y no terminales)
-La forma, general de expresar las gramaticas con atributos se escriben de forma tabular

Regla gramatical_____Regla Sem√°ntica
Regla 1_______ecuaciones de atributos
Regla 2_______ecuaciones de atributos
Regla 3_______ecuaciones de atributos
...
...
...
Regla n_______ecuaciones de atributos

EJEMPLO:
Regla gramatical_____Regla Sem√°ntica
decl‚Üí tipo lista-var___lista-var.at=tipo.at
tipo‚Üí int___________tipo.at = int
tipo‚Üí float_________tipo.at = float
lista-var‚Üí id                id.at = lista-
var.at A√±adetipo(id.entrada, lista-var.at)


Din√°mica
-Describe el efecto de ejecutar las diferentes construcciones en el lenguaje de programaci√≥n.
-Su efecto se describe durante la ejecuci√≥n del programa.
-S√≥lo se pueden ejecutar si son correctos para la sint√°xis y para la sem√°ntica est√°tica 
-No es f√°cil escribirla
-No existen herramientas est√°ndar (f√°ciles y claras) como en el caso de la sint√°xis (diagramas sint√°cticos y BNF)
-describe el prceso que una computadora sigue en un lenguaje especifico
-no hay diagrama claro como en la estatica
-Hay diferentes soluciones formales complejas:
‚≠ïSem√°ntica Axiom√°tica 
‚≠ïSem√°ntica Denotacional
-informal y sigue compleja
‚≠ïSemantica Operacional



Sem√°ntica Axiom√°tica 
-Considera al programa como ‚Äúuna m√°quina de estados‚Äù
-La notaci√≥n empleada es el ‚Äúc√°lculo de predicados‚Äù
-Se desarroll√≥ para probar la correcci√≥n de los programas
-Los constructores de un lenguajes de programaci√≥n se formalizan describiendo como su ejecuci√≥n provoca un cambio de estado. (describe los estados a travez de los predicados)

**FALTA**(a ver las diapos)(https://catedras.linti.unlp.edu.ar/mod/resource/view.php?id=29922)

Sem√°ntica Denotacional
-Se basa en la teoria de funciones recursivas
-describe los estados, la denotacional lo describe a travez de funciones
-se define una correspondencia entre los constructores sintacticos y sus significados

Semantica Operacional (Informal)
-El significado de un programa se describe mediante otro lenguaje de bajo nivel (implementado en una maquina abstracta)
-los cambios que se producen en el estado de la maquina cuando ejecuta una sentencia del lenguaje definen su significado   
-Es un m√©todo informal
-Es el mas utilizado en los libros
-PL/1 fue el primero
    
    Lenguaje Maquina
-Lenguaje de bajo nivel utilizado por las computadoras
-se utilizaba con 1's y 0's
-complejidad+=20
-uso del "lenguaje ensamblador" 
(assembler <3) que utiliza codigo memot√©cnico(abreviatura con el proposito de la instrccion ej:MOV=mover) 
    
-el codigo estaba "pegado" a la maquina que lo ejecutaba, era dificil que otra maquina lo pudiese ejecutar

-A partir de esto nacen los lenguajes de alto nivel

    
