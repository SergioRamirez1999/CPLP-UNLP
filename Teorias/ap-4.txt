UNIDADES - RUTINAS - ACCIONES

LOS PROGRAMAS ESTÁN COMPUESTOS POR UNIDADES.
LAS UNIDADES SON ACCIONES ABSTRACTAS. 
ESTAS SON LLAMADAS RUTINAS, PROCEDIMIENTOS O FUNCIONES.
LAS FUNCIONES SIEMPRE RETORNAN ALGO.
LAS RUTINAS TAMBIÉN TIENEN ATRIBUTOS
-NOMBRE: IDENTIFICADOR PARA INVOCAR. SE DEFINE EN SU DECLARACIÓN.
-ALCANCE: RANGO DE INSTRUCCIONES DONDE SE CONOCE SU NOMBRE. 
PUEDE SER ESTATICO O DINAMICO
-TIPO: DEFINICION DE TIPO DE LOS PARAMETROS Y EL TIPO DE VALOR DE RETORNO (SI EXISTE)
-L-VALUE: LUGAR DE MEMORIA EN EL QUE SE ALMACENA EL CUERPO DE LA RUTINA
-R-VALUE: LA LLAMADA A LA RUTINA CAUSA LA EJECUCION DE SU CÓDIGO, ESO CONSTITUYE SU R'VALOR.
    -ESTATICO: LO MÁS USUAL
    -DINAMICO: IMPLEMENTACIÓN MEDIANTE PUNTEROS A RUTINAS. (MÁS DE UN NIVEL DE INVOCACIÓN)

COMUNICACIÓN ENTRE RUTINAS

-AMBIENTE NO LOCAL: SALIR A BUSCAR LA DEFINICIÓN DE UN IDENTIFICADOR A OTRAS UNIDADES.
-PARÁMETROS: DIFERENTES DATOS EN CADA LLAMADO, MAYOR LEGIBILIDAD Y MODIFICABILIDAD.
    -FORMALES: APARECEN EN LA DEFINICION DE LA RUTINA.
    -REALES: APARECEN EN LA INVOCACIÓN DE LA RUTINA.

LIGADURA ENTRE PARAMETROS FORMALES Y REALES

-METODO POSICIONAL: SE LIGAN UNO A UNO POR POSICIÓN. 
    foo(a,b,c) -> invocación foo(1,2,3) ->  a=1, b=2, c=3
-VARIANTE: COMBINACIÓN CON VALORES POR DEFECTO
    foo(a=2, b=90, c=30) -> invocacion foo(1,2) -> a=1, b=2, c=30
-POR NOMBRE: SE LIGAN POR NOMBRE.
    foo(a,b,c) -> invocacion foo(a:1,b:2,c:3) -> a=1, b=2, c=3


REPRESENTACION EN EJECUCION

SEGMENTO DE CODIGO
INSTRUCCIONES DE LA UNIDAD.
SE ALMACENA EN LA MEMORIA DE INSTRUCCION "C"
##CONTENIDO FIJO##

REGISTRO DE ACTIVACION
DATOS LOCALES DE LA UNIDAD
SE ALMACENA EN LA MEMORIA DE DATOS "C"
CADA UNIDAD TIENE LIGADO UN REGISTRO DE ACTIVACIÓN
##CONTENIDO CAMBIANTE##


ELEMENTOS EN EJECUCION

-PUNTO DE RETORNO: 
ES UNA PIEZA CAMBIANTE DE INFORMACIÓN QUE DEBE SER SALVADA 
EN EL REGISTRO DE ACTIVACIÓN DE LA UNIDAD LLAMADA.

-AMBIENTE DE REFERENCIA
    -AMBIENTE LOCAL: VARIABLES LOCALES, LIGADAS A LOS OBJETOS ALMACENADOS EN SU REGISTRO DE ACTIVACION.
    -AMBIENTE NO LOCAL: VARIABLES NO LOCALES, LIGADAS A OBJETOS ALMACENADOS EN LOS REGISTROS DE ACTIVACION DE OTRAS UNIDADES.

ESTRUCTURA DE EJECUCION
DE LOS LENGUAJES DE PROGRAMACION

@MANIPULACION DE ZONA DE DATOS DIFERENTE

-ESTATICO
    -EL ESPACIO NECESARIO PARA LA EJECUCION SE DEDUCE DEL CODIGO.
    -TODO LOS REQUERIMIENTOS DE MEMORIA NECESARIOS SE CONOCEN ANTES DE LA EJECUCION.
    -LA ALOCACION PUEDE HACERSE ESTATICAMENTE.
    -NO PUEDE HABER RECURSION.
    -TODA UNIDAD DE ACTIVCACION SE CARGA EN MEMORIA DESDE EL INICIO DEL PROGRAMA.ESPACIOS ESTATICOS .
-BASADO EN PILA
    -EL ESPACIO SE DEDUCE DEL CODIGO
    -LA MEMORIA A UTILIZARSE ES PREDECIBLE Y SIGUE UNA DISCIPLINA LAST-IN-FIRST-OUT.
    -LAS VARIABLES SE ALOCAN AUTOMATICAMENTE Y SE DESALOCAN CUANDO EL ALCANCE SE TERMINA.
    -SE UTILIZA UNA ESTRUCTURA DE PILA PARA MODELIZARLO.
    -LA UNIDAD DE ACTIVICACION SE CARGA EN EL MOMENTO DE INVOCACION. SI SE TERMINA SU INVOCACION, EL REGISTRO DE ACTIVACION SE DESALOCA.
-DINAMICO
    -IMPREDECIBLE USO DE MEMORIA.
    -LOS DATOS SON ALOCADOS DINAMICAMENTE SOLO CUANDO SE LOS NECESITA DURANTE LA EJECUCION.
    -NO PUEDEN MODELIZARSE CON UNA PILA, EL PROGRAMADOR PUEDE CREAR OBJETOS DE DATOS EN CUALQUIER PUNTO ARBITRARIO DURANTE LA EJECUCION DEL PROGRAMA.
    -LOS REGISTROS DE ACTIVACION SE ALOCAN EN LA ZONA DE MEMORIA HEAP.


